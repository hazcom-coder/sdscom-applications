@page
@model SDSCom.Pages.ComponentTestModel

@{
    ViewData["Title"] = "Components";
}

<h2>Components</h2>

<form>

    @*@await Component.InvokeAsync("Grid", new
    {
        maxPriority = 4,
        isDone = true

    })*@

    
        <p>
            <a asp-page="Create">Create New</a>
        </p>
        <div class="form-actions no-color">
            <p>
                Find by name:
                <input type="text" name="SearchStringNaME" value="@Model.CurrentFilterName" />
                Find by CAS:
                <input type="text" name="SearchStringCAS" value="@Model.CurrentFilterCAS" />
                <input type="submit" value="Search" class="btn btn-default" /> |
                <a asp-page="ComponentTest">Back to full List</a>
            </p>
        </div>
        <table class="table">
            <thead>
                <tr>
                    <th>
                        <a asp-page="ComponentTest" asp-route-sortOrder="@Model.NameSort"
                           asp-route-currentFilter="@Model.CurrentFilterName">
                            @Html.DisplayNameFor(model => model.Entity[0].EntityName)

                        </a>
                    </th>
                    <th>
                        <a asp-page="ComponentTest" asp-route-sortOrder="@Model.CASSort"
                           asp-route-currentFilter2="@Model.CurrentFilterCAS">
                            @Html.DisplayNameFor(model => model.Entity[0].OtherId)

                        </a>
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Entity)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.EntityName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.OtherId)
                        </td>
                        <td>
                            <a asp-page="./Edit" asp-route-id="@item.Id">Edit</a> |
                            <a asp-page="./Details" asp-route-id="@item.Id">Details</a> |
                            <a asp-page="./Delete" asp-route-id="@item.Id">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        @{
            var prevDisabled = !Model.Entity.HasPreviousPage ? "disabled" : "";
            var nextDisabled = !Model.Entity.HasNextPage ? "disabled" : "";
        }

        <a asp-page="ComponentTest"
           asp-route-sortOrder="@Model.CurrentSort"
           asp-route-pageIndex="@(Model.Entity.PageIndex - 1)"
           asp-route-currentFilter="@Model.CurrentFilterName"
           asp-route-currentFilter2="@Model.CurrentFilterCAS"
           class="btn btn-default @prevDisabled">
            Previous
        </a>
        <a asp-page="ComponentTest"
           asp-route-sortOrder="@Model.CurrentSort"
           asp-route-pageIndex="@(Model.Entity.PageIndex + 1)"
           asp-route-currentFilter="@Model.CurrentFilterName"
           asp-route-currentFilter2="@Model.CurrentFilterCAS"
           class="btn btn-default @nextDisabled">
            Next
        </a>
</form>